package lib;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;

public class Cooksite extends JPanel {
    
    private JTextArea displayArea;

    public Cooksite() {
        setLayout(new BorderLayout());
        
        // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ JTextArea
        displayArea = new JTextArea();
        displayArea.setEditable(false);
        displayArea.setFont(new Font("Tahoma", Font.BOLD, 18)); 
        
        JScrollPane scrollPane = new JScrollPane(displayArea);
        scrollPane.setPreferredSize(new Dimension(450, 600)); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

        // ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
        JLabel header = new JLabel("<< ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ (‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß) >>", SwingConstants.CENTER);
        header.setFont(new Font("Tahoma", Font.BOLD, 18));
        add(header, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);

        // ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏°
        JPanel buttonPanel = new JPanel(new GridLayout(1, 2, 10, 10)); 
        
        JButton refreshBtn = new JButton("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
        refreshBtn.setFont(new Font("Tahoma", Font.PLAIN, 16));
        refreshBtn.addActionListener(e -> loadAndDisplayOrders());
        buttonPanel.add(refreshBtn);

        JButton completeBtn = new JButton("‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏¥‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
        completeBtn.setFont(new Font("Tahoma", Font.PLAIN, 16));
        completeBtn.addActionListener(e -> completeTopQueue());
        buttonPanel.add(completeBtn);

        add(buttonPanel, BorderLayout.SOUTH);
        loadAndDisplayOrders();
    }

    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ó‡∏≥ (Pending) ‡∏à‡∏≤‡∏Å BillHistorySaver ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
     */
    private void loadAndDisplayOrders() {
        displayArea.setText("");
        StringBuilder sb = new StringBuilder();
        int totalOrders = 0;
        
        try {
            // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Pending Orders ‡∏à‡∏≤‡∏Å BillHistorySaver
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: List<String[]> ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞ String[] ‡∏Ñ‡∏∑‡∏≠ {Queue, Timestamp, Items_Summary}
            java.util.List<String[]> pendingOrders = lib.BillHistorySaver.getPendingOrders();
            totalOrders = pendingOrders.size();

            if (totalOrders == 0) {
                sb.append("\n\n\n\n\n\n\n\n")
                  .append(String.format("%45s\n", ">> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ó‡∏≥‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ <<"));
            } else {
                for (String[] order : pendingOrders) {
                    String queue = order[0];
                    String timestamp = order[1];
                    String itemsSummary = order[2];

                    // ‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß
                    sb.append("==================================================\n");
                    sb.append(String.format("üì¢ ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà: %s  (%s)\n", queue, timestamp));
                    sb.append("--------------------------------------------------\n");
                    sb.append(String.format("%-25s %-10s %s\n", "‡πÄ‡∏°‡∏ô‡∏π", "‡∏Ç‡∏ô‡∏≤‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"));
                    sb.append("--------------------------------------------------\n");

                    // ‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏ô Summary
                    String[] items = itemsSummary.split(" \\| "); // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á " | "

                    for (String item : items) {
                        // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: Cat/Menu/Type/Price_Per_Unit/Quantity
                        String[] details = item.split("/");
                        
                        // FIX: ‡∏î‡∏∂‡∏á Quantity (Index 4)
                        if (details.length >= 5) { 
                            String menu = details[1];
                            String type = details[2];
                            String quantity = details[4]; // <<< Quantity
                            
                            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: ‡πÄ‡∏°‡∏ô‡∏π, ‡∏Ç‡∏ô‡∏≤‡∏î, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                            sb.append(String.format("  %-23s %-10s %s\n", menu, type, quantity));
                        } else {
                            sb.append("  !! ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ").append(item).append("\n");
                        }
                    }
                    sb.append("==================================================\n\n");
                }
            }

        } catch (IOException e) {
            sb.append("\n\n!! ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ö‡∏¥‡∏• !!\n");
            e.printStackTrace();
        }
        
        displayArea.setText(sb.toString());
        
        if (totalOrders > 0) {
             displayArea.append(String.format("\n\n>> ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ó‡∏≥ <<\n", totalOrders));
        }
    }

    private void completeTopQueue() {
        try {
            boolean success = lib.BillHistorySaver.markTopQueueAsCompleted();
            if (success) {
                JOptionPane.showMessageDialog(this, "‡∏Ñ‡∏¥‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß", "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", JOptionPane.WARNING_MESSAGE);
            }
            loadAndDisplayOrders(); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå: " + e.getMessage(), "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î I/O", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public static void showCookSite() {
        JFrame frame = new JFrame("‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ñ‡∏£‡∏±‡∏ß (Kitchen Display)");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.add(new Cooksite());
        frame.pack(); 
        frame.setLocationRelativeTo(null); 
        frame.setVisible(true);
    }
}